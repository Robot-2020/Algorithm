//1.统计二进制数1的位数
while(a != 0){
  a = a & (a - 1);
  count++;
}

while(n != 0){
    if( n & 1 == 1)
        count++;
    n >>= 1;
}


//2.位运算实现加减
^	异或	两位不相同，结果为1
&	与	两位都为1，那么结果为1
这样我们通过 异或 与 操作就完成了加法计算的 一半 （也叫半加器）。
我们通过 & 获取进位
int add(int a, int b){
    while(b){
        int carry = a & b;
        a ^= b;
        b = (unsigned)carry << 1;  //防止b为负数位运算出错
    }
    return a;
}

//3.右移 >>
i >> j
i中所有的位向右移j位（/= 2^j）
所有小于int的类型，移位以int的方式来做，结果是int
对于unsigned的类型，左边填入0
对于signed的类型，左边填入原来的最高位（保持符号不变）-->算术移位

int GetBit(char c, int i){
  return (c >> i) & i;
}

void SetBit(char *c, int i, int v){
  if( v ){
    c |= ( 1 << i );
  }
  else
    c &= ~(1 << i );
}

void FlipBit(char & c, int i){
  c ^= ( 1 << i );
}
