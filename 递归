//1.Hanoi 汉诺塔问题
#include <iostream>
using namespace std;
void Hanoi(int n, char src,char mid,char dest,int src_n)
//将src座上的n个盘子，以mid座为中转，移动到dest座
//src座上最上方盘子编号是 src_n
{
	if( n == 1) { //只需移动一个盘子
		cout << src_n << ":" << src << "->" << dest << endl;
//直接将盘子从src移动到dest即可
		return ;
	}
	Hanoi(n-1,src,dest,mid,src_n); //先将n-1个盘子从src移动到mid
	cout << src_n + n - 1 << ":" << src << "->" << dest << endl;
//再将一个盘子从src移动到dest
	Hanoi(n-1,mid,src,dest,src_n); //最后将n-1个盘子从mid移动到dest
	return ;
}
int main() {
	char a ,b,c ;
	int n;
	cin >> n >> a >> b >> c; //输入盘子数目
	Hanoi(n,a,b,c,1);
	return 0;
}


//2.逆波兰表达式
#include <iostream>
#include <cstdio>
#include <cstdlib>
using namespace std;
double exp() {
//读入一个逆波兰表达式，并计算其值
	char s[20];
	cin >> s;
	switch(s[0]) {
		case '+':
			return exp()+exp();
		case '-':
			return exp()-exp();
		case '*':
			return exp()*exp();
		case '/':
			return exp()/exp();
		default:
			return atof(s); //stdlib里的char->float
			break;
	}
}
int main() {
	printf("%lf",exp());
	return 0;
}

//3.上台阶
//f(n) = f(n-1) + f(n-2)
#include <iostream>
using namespace std;
int N;
int stairs(int n) {
	if( n < 0)
		return 0;
	if( n == 0 )
		return 1;
	return stairs(n-1) + stairs(n-2);
}
int main() {
	while(cin >> N) {
		cout << stairs(N) << endl;
	}
	return 0;
}


//4.放苹果 m个苹果 n个盘子
//盘子空 //不空
//设i个苹果放在k个盘子里的放法总数是f(i, k)
//k>i时，f(i, k) = f(i ,i);

//k<=i时, f(i, k) = f(i, k-1) + f(i-k, k)  总放法=有盘子为空的方法+没盘子为空的放法

#include <iostream>
using namespace std;
int f(int m,int n) {
	if( n > m )
		return f(m,m);
	if( m == 0)
		return 1;
	if( n <= 0 )
		return 0;
	return f(m,n-1) + f(m-n,n);
}
int main() {
	int t,m,n;
	cin >> t;
	while( t--) {
		cin >> m >> n;
		cout << f(m,n) << endl;
	}
	return 0;
}

//5.算24
#include <iostream>
#include <cmath>
using namespace std;
double a[5];
#define EPS 1e-6
bool isZero(double x) {
	return fabs(x) <= EPS;
}
bool count24(double a[],int n) {
	//用数组a里的 n个数，计算24
	if( n == 1 ) {
		if(isZero( a[0] - 24) )
			return true;
		else
			return false;
	}
	double b[5];
	for(int i = 0; i < n-1; ++i)
		for(int j = i+1; j < n; ++j) { //枚举两个数的组合
			int m = 0; //还剩下m个数, m = n - 2
			for(int k = 0; k < n; ++k)
				if( k != i && k!= j)
					b[m++] = a[k];//把其余数放入b
			b[m] = a[i]+a[j];
			if(count24(b,m+1))
				return true;
			b[m] = a[i]-a[j];
			if(count24(b,m+1))
				return true;
			b[m] = a[j]-a[i];
			if(count24(b,m+1))
				return true;
			b[m] = a[i]*a[j];
			if(count24(b,m+1))
				return true;
			if( !isZero(a[j])) {
				b[m] = a[i]/a[j];
				if(count24(b,m+1))
					return true;
			}
			if( !isZero(a[i])) {
				b[m] = a[j]/a[i];
				if(count24(b,m+1))
					return true;
			}
		}
	return false;
}
int main() {
	while(true) {
		for(int i = 0; i < 4; ++i)
			cin >> a[i];
		if( isZero(a[0]))
			break;
		if( count24(a,4))
			cout << "YES" << endl;
		else
			cout << "NO" << endl;
	}
	return 0;
}


//6.表达式***


//7.N皇后***
#include<iostream>
#include<cstdlib>
#include<cstring>
using namespace std;

int N;
int *queenPos;
void NQueen(int k){
	int i;
	if( k == N){					//如果已经N行已经排列好了就输出。
		for(int i = 0; i < N; i++)
			cout<<queenPos[i] + 1 <<" ";
		cout<<endl;
		return;
	}
	for(i = 0; i < N; i++){				//现在开始排第K个皇后，在第K行的每一列找合适的位置。
		int j;
		for(j = 0; j < k; j++){
			if(queenPos[j] == i || abs(queenPos[j] - i) == abs( k -j )){	//如果这一列已经有皇后或者斜对角有皇后了就break到下一列。
				break;
			}
		}
		if( j == k){
			queenPos[k] = i;		//判断有没有break过，如果没有说明找到了合适的位置，然后就可以排下一个皇后即下一行了。
			NQueen(k + 1);			//为什么可以输出很多个呢，因为return之后会继续循环下一次。
		}
	}
}

int main(){
	cin>>N;
	queenPos = (int *)malloc(sizeof(int)*N);
	NQueen(0);
	return 0;
}
