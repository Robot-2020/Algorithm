//动态规划  [记忆型递归]（存放计算结果以避免重复计算） /  [循环递推]
/*
特点：
1) 问题具有最优子结构性质。
2) 无后效性。

步骤：
1. 将原问题分解为子问题
2. 确定状态
3. 确定一些初始状态（边界状态）的值
4. 确定状态转移方程
*/

//1.最大三角形路径和    
//记忆型递归
#include <iostream>
#include <algorithm>
using namespace std;
#define MAX 101
int D[MAX][MAX];
int n;
int maxSum[MAX][MAX];

int MaxSum(int i, int j) {
	if( maxSum[i][j] != -1 )
		return maxSum[i][j];
	if(i==n)
		maxSum[i][j] = D[i][j];
	else {
		int x = MaxSum(i+1,j);
		int y = MaxSum(i+1,j+1);
		maxSum[i][j] = max(x,y)+
		               D[i][j];
	}
	return maxSum[i][j];
}
int main() {
	int i,j;
	cin >> n;
	for(i=1; i<=n; i++)
		for(j=1; j<=i; j++) {
			cin >> D[i][j];
			maxSum[i][j] = -1;
		}
	cout << MaxSum(1,1) << endl;
}

//最大三角形路径和-2
//递推

#include<stdio.h>
#include<math.h>

const int MAX = 101;
int maxSum[MAX][MAX];	// 进一步可以用一维数组存储  //再进一步不用开辟额外空间，只用D数组最后一行存放 
int D[MAX][MAX];
int n;

int main(){
	int i,j;
	scanf("%d", &n);
	for(i=0; i < n; i++)
		for(j=0; j <= i; j++) {
			scanf("%d", &D[i][j]);
			maxSum[i][j] = -1;
		}
	for(i = n-1; i >= 0; i--){
		for(j = 0; j <= i; j++){
			if(i == n-1)
				maxSum[i][j] = D[i][j];
			else{
				maxSum[i][j] = fmax(maxSum[i+1][j], maxSum[i+1][j+1]) + D[i][j];
			}
		}
	}
	printf("%d", maxSum[0][0]);
	return 0;
} 

//最终版：递推+空间优化
#include <iostream>
#include <algorithm>
using namespace std;
#define MAX 101
int D[MAX][MAX];
int n;
int * maxSum;
int main() {
	int i,j;
	cin >> n;
	for(i=1; i<=n; i++)
		for(j=1; j<=i; j++)
			cin >> D[i][j];
	maxSum = D[n]; //maxSum指向第n行  D[n]是地址！！！
	for( int i = n-1; i>= 1; --i )
		for( int j = 1; j <= i; ++j )
			maxSum[j] = max(maxSum[j],maxSum[j+1]) + D[i][j];
	cout << maxSum[1] << endl;
}


//2.最长上升子序列
#include<stdio.h>
#include<math.h>
const int MAXN = 1010;
int a[MAXN], maxLen[MAXN];

int main() {
	int n;
	scanf("%d", &n);
	for(int i = 0; i < n; i++)
		scanf("%d", &a[i]);
	maxLen[0] = 1;
	int res = 1;
	for(int i =1; i < n; i++) {
		for(int j = 0; j < i; j++) {
			if(a[j] < a[i])
				maxLen[i] = fmax(maxLen[i], maxLen[j] + 1);
			res = fmax(maxLen[i], res);
		}
	}
	printf("%d", res);
	return 0;
}


//3.最长公共子序列
#include<stdio.h>
#include<math.h>
#include<string.h>

const int MAXN = 101;
int dp[MAXN][MAXN];

int main(){
	char s1[MAXN], s2[MAXN];
	scanf("%s %s", s1, s2);
	int len1 = strlen(s1), len2 = strlen(s2);
	int res = 1;
	for(int i = 0; i <= len1; i++)
		dp[i][0] = 0;
	for(int j = 0; j <= len2; j++)
		dp[0][j] = 0;
	for(int i = 1; i <= len1; i++){
		for(int j = 1; j <= len2; j++){
			if(s1[i-1] == s2[j-1])
				dp[i][j] = dp[i-1][j-1] + 1;
			else
				dp[i][j] = fmax(dp[i-1][j], dp[i][j-1]);
			res = fmax(res, dp[i][j]);
		}
	}
	printf("%d", res);
	return 0;
}


//4.神奇的口袋
#include<iostream>
#include<cstring>
using namespace std;

int a[30];
int N;

/*递归 
int Ways(int w, int k){
	if(w == 0)
		return 1;
	if(k <= 0)
		return 0;
	return Ways(w, k-1) + Ways(w - a[k], k - 1);
}

int main(){
	cin>>N;
	for(int i = 1; i <= N; ++i)
		cin>>a[i];
	cout<<Ways(40, N);
	return 0;
}
*/

/*动规*/
int Ways[40][30]; //Ways[w][k]表示从前j种物品里凑出体积w的方法数
int main(){
	cin>>N;
	memset(Ways, 0, sizeof(Ways));
	for(int i = 1; i <= N; ++i){
		cin>>a[i];
		Ways[0][i] = 1;
	}
	Ways[0][0] = 1;
	for(int w = 1; w <= 40; w++){
		for(int k = 1; k <= N; k++){
			Ways[w][k] = Ways[w][k-1];
			if(w - a[k] >= 0)
				Ways[w][k] += Ways[w-a[k]][k-1];
		}
	}
} 

//5.0-1背包
